<#
    .SYNOPSIS
    Reads output from Get-SharedMailboxReceivedMessages and generates report for inactive shared mailboxes.

    .PARAMETER PreviousWeeks
    Number of weeks to look back to gather data from. Default value if not specified is 4 weeks.

    .PARAMETER InputPath
    Filepath to existing reports generated by Get-SharedMailboxReceivedMessages

    .PARAMETER ExportPath
    Filepath to export report of received message data to

    .EXAMPLE
    New-SharedMailboxInactivityReport -InputPath "C:\SharedMBReceivedMessagesReports\" -ExportPath "C:\SharedMailboxInactivityReports\"

    Generates report based on previous data in -InputPath and exports a report of inactive addresses at the specified -ExportPath location

#>

function New-SharedMailboxInactivityReport {
    param (

        [int]$PreviousWeeks = 4,

        [Parameter(Mandatory=$true)]
        [System.IO.FileInfo]$InputPath,

        [Parameter(Mandatory=$true)]
        [System.IO.FileInfo]$ExportPath

    )

    #Connect to Exchange Online
    Connect-ExchangeOnline

    #Read existing CSVs
    for ($i = 0; $i -lt $PreviousWeeks; $i++) {

        #Get date used in report filename for each week
        $reportDate = (Get-Date).AddDays(-(7*($i+1))).ToString("MMddyyyy")

        #Create variable for each CSV
        New-Variable -Name "week$($i)Data" -Value (Import-Csv -Path "$($InputPath)SharedMBReceivedMessages_$reportDate.csv")
    }

    #Import all CSVs
    $csvs = $null
    $csvVars = Get-Variable -Name "week*Data"
    foreach ($var in $csvVars) {
        $csvs += $var.Value
    }

    #Create empty ArrayList to store data about orphaned accounts in
    $arrOrphanedAddresses = New-Object System.Collections.ArrayList

    #Create empty ArrayList for addresses that have already been checked
    $arrChecked = New-Object System.Collections.ArrayList


    #Compare each CSV
    $noMessages = $csvs | Where-Object {$_.MessageCount -eq 0}
    foreach ($recipient in $noMessages) {
        if ($arrChecked -notcontains $recipient.RecipientAddress) {
            $count = ($noMessages.RecipientAddress | Select-String -Pattern $recipient.RecipientAddress).Count
            if ($count -eq $PreviousWeeks) {
                #Get Shared MB Info
                $sharedMBDetails = Get-EXOMailbox -Identity $recipient.RecipientAddress
                $displayName = $sharedMBDetails.DisplayName
                $email = $sharedMBDetails.PrimarySMTPAddress
                $members = (Get-EXOMailboxPermission -Identity $recipient.RecipientAddress | Sort-Object User | Select-Object -ExpandProperty User) -join ", "
                $rights = (Get-EXOMailboxPermission -Identity $recipient.RecipientAddress | Sort-Object User | Select-Object -ExpandProperty AccessRights) -join ", "
                $memberCount = ((Get-EXOMailboxPermission -Identity $recipient.RecipientAddress | Sort-Object User | Select-Object -ExpandProperty User) | Measure-Object).Count
    
                #Store data in PSCustomObject
                $psObjOrphanedAddresses = [PSCustomObject]@{
                    DisplayName  = $displayName
                    Email        = $email
                    Members      = $members
                    AccessRights = $rights
                    MemberCount  = $memberCount
                }
    
                #Add PSCustomObject to previously defined ArrayList. Cast to void to avoid returning index value in console.
                [void]$arrOrphanedAddresses.Add($psObjOrphanedAddresses)
    
            }
        } else {
            continue
        }

        [void]$arrChecked.Add($recipient.RecipientAddress)

    }

    #Output data in tabular format in console
    $arrOrphanedAddresses | Format-Table -AutoSize

    #Get date for use in export filename
    $date = Get-Date -Format MMddyyyy

    #Generate filename
    $reportPath = "$ExportPath\InactiveSharedMailboxes_$date.csv"

    #Export data as a CSV
    $arrOrphanedAddresses | Export-Csv -Path $reportPath -NoTypeInformation

    #Cleanup old files
    for ($i = 0; $i -lt $PreviousWeeks; $i++) {

        #Get date used in report filename for each week
        $reportDate = (Get-Date).AddDays(-(7*($i+1))).ToString("MMddyyyy")

        #Remove each report
        Remove-Item -Path "$($InputPath)SharedMBReceivedMessages_$reportDate.csv" -Force

    }

    #Disconnect from ExchangeOnline
    Disconnect-ExchangeOnline -Confirm:$false
}